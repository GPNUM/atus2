(in-package #:noise-solver)

(defclass generic-header ()
  ((nself :accessor nself)
   (nDatatyp :accessor nDatatyp)
   (nself_and_data :accessor nself_and_data)
   (nDims :accessor nDims)
   (nDimX :accessor nDimX)
   (nDimY :accessor nDimY)
   (nDimZ :accessor nDimZ)
   (bAtom :accessor bAtom)
   (bComplex :accessor bComplex)
   (duration :accessor get-duration)
   (xMin :accessor xMin)
   (xMax :accessor xMax)
   (yMin :accessor yMin)
   (yMax :accessor yMax)
   (zMin :accessor zMin)
   (zMax :accessor zMax)
   (dx :accessor dx)
   (dy :accessor dy)
   (dz :accessor dz)
   (dkx :accessor dkx)
   (dky :accessor dky)
   (dkz :accessor dkz)
   (dt :accessor dt)
   (ks :accessor ks)
   (nFuture :accessor nFuture)
   (dFuture :accessor dFuture)))

(defun read-u32 (in)
  (let ((value 0))
    (setf (ldb (byte 8 0) value) (read-byte in))
    (setf (ldb (byte 8 8) value) (read-byte in))
    (setf (ldb (byte 8 16) value) (read-byte in))
    (setf (ldb (byte 8 24) value) (read-byte in))
    value))

(defun write-u32 (out value)
  (write-byte (ldb (byte 8 0) value) out)
  (write-byte (ldb (byte 8 8) value) out)
  (write-byte (ldb (byte 8 16) value) out)
  (write-byte (ldb (byte 8 24) value) out))

(defun read-u64 (in)
  (let ((value 0))
    (setf (ldb (byte 8 0) value) (read-byte in))
    (setf (ldb (byte 8 8) value) (read-byte in))
    (setf (ldb (byte 8 16) value) (read-byte in))
    (setf (ldb (byte 8 24) value) (read-byte in))
    (setf (ldb (byte 8 32) value) (read-byte in))
    (setf (ldb (byte 8 40) value) (read-byte in))
    (setf (ldb (byte 8 48) value) (read-byte in))
    (setf (ldb (byte 8 56) value) (read-byte in))
    value))

(defun write-u64 (out value)
  (write-byte (ldb (byte 8 0) value) out)
  (write-byte (ldb (byte 8 8) value) out)
  (write-byte (ldb (byte 8 16) value) out)
  (write-byte (ldb (byte 8 24) value) out)
  (write-byte (ldb (byte 8 32) value) out)
  (write-byte (ldb (byte 8 40) value) out)
  (write-byte (ldb (byte 8 48) value) out)
  (write-byte (ldb (byte 8 56) value) out))

(defun read-float64 (in)
  (ieee-floats:decode-float64 (the (unsigned-byte 64) (read-u64 in))))

(defun write-float64 (out value)
  (write-u64 out (ieee-floats:encode-float64 value)))

(defun read-complex64 (in)
  (complex (read-float64 in) (read-float64 in)))

(defun write-complex64 (out value)
  (write-float64 out (realpart value))
  (write-float64 out (imagpart value)))

(defun read-bin (in)
  (let* ((header (read-header in))
         (matrix (make-array (list (nDimX header) (nDimY header))
                             :element-type 'complex :initial-element #C(0.0 0.0))))
    (loop :for i :below (nDimX header)
       :do (loop :for j :below (nDimY header)
              :do
              (setf (aref matrix i j) (read-complex64 in))))
    (values header matrix)))

(defun write-bin (out header matrix)
  (write-header out header)
  (write-matrix out matrix))

(defun read-matrix (out matrix)
  (loop :for i :below (array-dimension matrix 0)
     :do (loop :for j :below (array-dimension matrix 1)
            :do
            (write-complex64 out (aref matrix i j)))))

(defun write-matrix (out matrix)
  (loop :for i :below (array-dimension matrix 0)
     :do (loop :for j :below (array-dimension matrix 1)
            :do
            (write-complex64 out (aref matrix i j)))))

(defmethod read-header (in)
  (let ((header (make-instance 'generic-header)))
    (setf (nself header) (read-u64 in))
    (setf (nDatatyp header) (read-u64 in))
    (setf (nself_and_data header) (read-u64 in))
    (setf (nDims header) (read-u64 in))
    (setf (nDimX header) (read-u64 in))
    (setf (nDimY header) (read-u64 in))
    (setf (nDimZ header) (read-u64 in))
    (setf (bAtom header) (read-u32 in))
    (setf (bComplex header) (read-u32 in))
    (setf (get-duration header) (read-float64 in))
    (setf (xMin header) (read-float64 in))
    (setf (xMax header) (read-float64 in))
    (setf (yMin header) (read-float64 in))
    (setf (yMax header) (read-float64 in))
    (setf (zMin header) (read-float64 in))
    (setf (zMax header) (read-float64 in))
    (setf (dx header) (read-float64 in))
    (setf (dy header) (read-float64 in))
    (setf (dz header) (read-float64 in))
    (setf (dkx header) (read-float64 in))
    (setf (dky header) (read-float64 in))
    (setf (dkz header) (read-float64 in))
    (setf (dt header) (read-float64 in))
    (setf (ks header) (read-u32 in))
    (setf (nFuture header) (make-array 100 :element-type 'fixnum))
    (loop :for i :below 100
       :do (setf (aref (nFuture header) i) (read-u32 in)))
    (setf (dFuture header) (make-array 100 :element-type 'double-float))
    (loop :for i :below 100
       :do (setf (aref (dFuture header) i) (read-float64 in)))
    header))

(defmethod write-header (out header)
  (write-u64 out (nself header))
  (write-u64 out (nDatatyp header))
  (write-u64 out (nself_and_data header))
  (write-u64 out (nDims header))
  (write-u64 out (nDimX header))
  (write-u64 out (nDimY header))
  (write-u64 out (nDimZ header))
  (write-u32 out (bAtom header))
  (write-u32 out (bComplex header))
  (write-float64 out (get-duration header))
  (write-float64 out (xMin header))
  (write-float64 out (xMax header))
  (write-float64 out (yMin header))
  (write-float64 out (yMax header))
  (write-float64 out (zMin header))
  (write-float64 out (zMax header))
  (write-float64 out (dx header))
  (write-float64 out (dy header))
  (write-float64 out (dz header))
  (write-float64 out (dkx header))
  (write-float64 out (dky header))
  (write-float64 out (dkz header))
  (write-float64 out (dt header))
  (write-u32 out (ks header))
  (loop :for i :below 100
     :do (write-u32 out (aref (nFuture header) i)))
  (loop :for i :below 100
     :do (write-float64 out (aref (dFuture header) i))))
